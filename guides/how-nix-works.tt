[% WRAPPER layout.tt title="Guides - How Nix works" handlesLayout=1 %]

<div class="page-title">
  <div>
    <a href="[% root%]learn.html#learn-guides">Learn</a>
    <span>→</span>
  </div>
  <h1>How Nix works</h1>
</div>

<div class="generic-layout">
  <div>
    <p>
      Nix provides <em>reproducible builds</em> and <em>correct deployment</em> of build results by ensuring <em>complete, exact dependencies</em> both at build time and run time.
    </p>
    <p>
      Exact dependencies enable presence of <em>multiple versions</em> of a software package at the same time without conflicts.
    </p>
    <p>
      Since different package versions are fully separated, Nix has <em>atomic upgrades and rollbacks</em> of package versions, user environments, or system configurations:
      it only requires changing a single symlink, which connects to the entire dependency tree.
    </p>
    <p>
      Nix <em>transparently reuses build results</em> from your machine or a remote cache, as long as their build inputs or build plans do not change.
    </p>
    <p>
      The <em>Nix package collection</em> holds tens of thousands of working packages <em>built from source</em> and <em>instantly available in binary form</em>, and provides mechanisms to <em>adapt or compose packages</em> according to your needs.
    </p>
    <p>
      Nix build plans are declared in a <em>purely functional configuration language</em>, the Nix expression language.
      It allows precise specification of build inputs and build instructions, and arbitrary composition of packages in a flexible, concise manner.
    </p>
    <p>
      In practice, Nix can
      <ul>
        <li>
          run programs ad-hoc without installing them
        </li>
        <li>
          establish temporary environments with all required dependencies
        </li>
        <li>
          install programs and keep them up to date
        </li>
        <li>
          provide reproducible, portable development environments, user environments, and entire operating system configurations.
        </li>
      </ul>
    </p>

    <h1 id="features">Features</h1>

    <h2 id="complete-dependencies">Complete dependencies</h2>

    <p>
      When you’re making a package for a package management system, like RPM, you
      are supposed to declare its dependencies, but you can't easily guarantee
      that your dependency declaration is complete. If you forget a dependency,
      that you have separately installed on your machine, then the component may
      build and work correctly on <em>your</em> machine, but failing on the end
      user's machine.
    </p>

    <p>
      Nix ensures that package dependency specifications are complete.
    </p>

    <p>
      Under Nix, a build process will only find resources that have been declared
      explicitly as dependencies. There's no way it can build until everything it
      needs has been correctly declared. If it builds, you will know you've
      provided a complete declaration.
    </p>

    <p>
      Once a build is complete, ongoing runtime dependencies are detected
      automatically.
    </p>

    <h2 id="multiple-versions">Multiple versions</h2>

    <p>
      You can have multiple versions or variants of a package installed at the
      same time. This is especially important when different applications have
      dependencies on different versions of the same package — it prevents the
      “DLL hell”. Because of the hashing scheme, different versions of a package
      end up in different paths in the Nix store, so they don’t interfere with
      each other.
    </p>

    <p>
      An important consequence is that operations like upgrading or uninstalling
      an application cannot break other applications, since these operations
      never “destructively” update or delete files that are used by other
      packages.
    </p>

    <h2 id="atomic">Atomic upgrades and rollbacks</h2>

    <p>
      Since package management operations never overwrite packages in the Nix
      store but just add new versions in different paths, they are
      <em>atomic</em>. So during a package upgrade, there is no time window in
      which the package has some files from the old version and some files from
      the new version — which would be bad because a program might well crash if
      it’s started during that period.
    </p>

    <p>
      And since packages aren’t overwritten, the old versions are still there
      after an upgrade. This means that you can <em>roll back</em> to the old
      version:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nix-env --upgrade <em>some-packages</em>
<span class="shell-prompt">$ </span>nix-env --rollback</pre>


    <h2 id="garbage-collection">Garbage collection</h2>

    <p>
      When you uninstall a package like this…
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nix-env --uninstall firefox</pre>

    <p>
      the package isn’t deleted from the system right away (after all, you might
      want to do a rollback, or it might be in the profiles of other users).
      Instead, unused packages can be deleted safely by running the <em>garbage
        collector</em>:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nix-collect-garbage</pre>

    <p>
      This deletes all packages that aren’t in use by any user profile or by a
      currently running program.
    </p>


    <h2 id="nix-language">Functional package language</h2>

    <p>
      Packages are built from <em>Nix expressions</em>, which is a simple
      functional language. A Nix expression describes everything that goes into a
      package build action (a “derivation”): other packages, sources, the build
      script, environment variables for the build script, etc. Nix tries very
      hard to ensure that Nix expressions are <em>deterministic</em>: building a
      Nix expression twice should yield the same result.
    </p>

    <p>
      Because it’s a functional language, it’s easy to support building variants
      of a package: turn the Nix expression into a function and call it any
      number of times with the appropriate arguments. Due to the hashing scheme,
      variants don’t conflict with each other in the Nix store.
    </p>


    <h2 id="source-binary">Transparent source/binary deployment</h2>

    <p>
      Nix expressions generally describe how to build a package from source, so
      an installation action like
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nix-env --install firefox</pre>

    <p>
      <em>could</em> cause quite a bit of build activity, as not only Firefox but
      also all its dependencies (all the way up to the C library and the
      compiler) would have to built, at least if they are not already in the Nix
      store. This is a <em>source deployment model</em>. For most users,
      building from source is not very pleasant as it takes far too long.
      However, Nix can automatically skip building from source and instead use a
      <em>binary cache</em>, a web server that provides pre-built binaries. For
      instance, when asked to build
      <tt>/nix/store/b6gvzjyb2pg0…-firefox-33.1</tt> from source, Nix would first
      check if the file <tt>http://cache.nixos.org/b6gvzjyb2pg0….narinfo</tt>
      exists, and if so, fetch the pre-built binary referenced from there;
      otherwise, it would fall back to building from source.
    </p>


    <!--
    <h2>Binary patching</h2>

    <p>
      In addition to downloading binaries automatically if they’re available, Nix
      can download binary deltas that patch an existing package in the Nix store
      into a new version. This speeds up upgrades.
    </p>
    -->


    <h2 id="nix-packages-collection">Nix Packages collection</h2>

    <p>
      We provide a large set of Nix expressions containing thousands of existing
      Unix packages, the <a href="https://github.com/NixOS/nixpkgs"><em>Nix
          Packages collection</em> (Nixpkgs)</a>.
    </p>


    <h2 id="managing-build-environments">Managing build environments</h2>

    <p>
      Nix is extremely useful for developers as it makes it easy to automatically
      set up the build environment for a package. Given a Nix expression that
      describes the dependencies of your package, the command
      <strong>nix-shell</strong> will build or download those dependencies if
      they’re not already in your Nix store, and then start a Bash shell in which
      all necessary environment variables (such as compiler search paths) are
      set.
    </p>

    <p>
      For example, the following command gets all dependencies of the Pan
      newsreader, as described by
      <a href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/networking/newsreaders/pan/default.nix">
        its Nix expression</a>:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nix-shell '&lt;nixpkgs&gt;' -A pan</pre>

    <p>
      You’re then dropped into a shell where you can edit, build and test the
      package:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">[nix-shell]$ </span>tar xf $src
<span class="shell-prompt">[nix-shell]$ </span>cd pan-*
<span class="shell-prompt">[nix-shell]$ </span>./configure
<span class="shell-prompt">[nix-shell]$ </span>make
<span class="shell-prompt">[nix-shell]$ </span>./pan/gui/pan</pre>

    <p>
      Since Nix packages are reproducible and have complete dependency
      specifications, Nix makes an excellent basis for <a href="https://github.com/NixOS/hydra">a continuous build
        system</a>.
    </p>

    <h2 id="multi-user-support">Multi-user support</h2>

    <p>
      Starting at version 0.11, Nix has multi-user support. This means that
      non-privileged users can securely install software. Each user can have a
      different <em>profile</em>, a set of packages in the Nix store that appear
      in the user’s <tt>PATH</tt>. If a user installs a package that another user
      has already installed previously, the package won’t be built or downloaded
      a second time. At the same time, it is not possible for one user to inject
      a Trojan horse into a package that might be used by another user.
    </p>

    <h2 id="portable">Portability</h2>

    <p>Nix runs on Linux and macOS.</p>


    <h1 id="nixos">How NixOS works?</h1>

    <p>
      NixOS is based on <a href="/">Nix</a>, a purely functional package
      management system. Nix stores all packages in isolation from each other
      under paths such as
    </p>

    <pre class="file-listing">/nix/store/5rnfzla9kcx4mj5zdc7nlnv8na1najvg-firefox-3.5.4/</pre>

    <p>
      The string <tt>5rnf...</tt> is a cryptographic hash of all input used to
      build the package. Packages are never overwritten after they have been
      built; instead, if you change the build description of a package (its ‘Nix
      expression’), it’s rebuilt and installed in a different path in
      <tt>/nix/store</tt> so it doesn’t interfere with the old version. NixOS
      extends this by using Nix not only to build packages, but also things like
      configuration files. For instance, the configuration of the SSH daemon is
      also built from a Nix expression and stored under a path like
    </p>

    <pre class="file-listing">/nix/store/s2sjbl85xnrc18rl4fhn56irkxqxyk4p-sshd_config</pre>

    <p>
      By building entire system configurations from a Nix expression, NixOS
      ensures that such configurations don’t overwrite each other, can be rolled
      back, and so on.
    </p>

    <p>
      A big implication of the way that Nix/NixOS stores packages is that there
      is no <tt>/bin</tt>, <tt>/sbin</tt>, <tt>/lib</tt>, <tt>/usr</tt>, and so
      on. Instead all packages are kept in <tt>/nix/store</tt>. (The only
      exception is a symlink <tt>/bin/sh</tt> to Bash in the Nix store.) Not
      using ‘global’ directories such as <tt>/bin</tt> is what allows multiple
      versions of a package to coexist. Nix does have a <tt>/etc</tt> to keep
      system-wide configuration files, but most files in that directory are
      symlinks to generated files in <tt>/nix/store</tt>.
    </p>


    <h2 id="declarative-system-model">Declarative system configuration model</h2>

    <p>
      In NixOS, the entire operating system — the kernel, applications, system
      packages, configuration files, and so on — is built by the <a href="/">Nix
        package manager</a> from a description in a purely functional build
      language. The fact that it’s purely functional essentially means that
      building a new configuration cannot overwrite previous configurations. Most
      of the other features follow from this.
    </p>

    <p>
      You configure a NixOS system by writing a specification of the
      functionality that you want on your machine in
      <tt>/etc/nixos/configuration.nix</tt>. For instance, here is a minimal
      configuration of a machine running an SSH daemon:
    </p>

    <pre class="file-listing">{
    boot.loader.grub.device = "/dev/sda";

    fileSystems."/".device = "/dev/sda1";

    services.sshd.enable = true;
  }</pre>

    <p>
      After changing <tt>/etc/nixos/configuration.nix</tt>, you realise the
      configuration by running this command:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nixos-rebuild switch</pre>

    <p>
      This command does everything necessary to make the configuration happen,
      including downloading and compiling OpenSSH, generating the configuration
      files for the SSH server, and so on.
    </p>


    <h2 id="reliable-upgrades">Reliable upgrades</h2>

    <p>
      Another advantage of purely functional package management is that
      <tt>nixos-rebuild switch</tt> will always produce the same result,
      regardless of what packages or configuration files you already had on your
      system. Thus, upgrading a system is as reliable as reinstalling from
      scratch.
    </p>


    <h2 id="atomic-upgrades">Atomic upgrades</h2>

    <p>
      NixOS has a <em>transactional</em> approach to configuration management:
      configuration changes such as upgrades are <em>atomic</em>. This means that
      if the upgrade to a new configuration is interrupted — say, the power fails
      half-way through — the system will still be in a consistent state: it will
      either boot in the old or the new configuration. In most other systems,
      you’ll end up in an inconsistent state, and your machine may not even boot
      anymore.
    </p>


    <h2 id="rollbacks">Rollbacks</h2>

    <p>
      Because the files of a new configuration don’t overwrite old ones, you can
      (atomically) roll back to a previous configuration. For instance, if after
      a <tt>nixos-rebuild switch</tt> you discover that you don’t like the new
      configuration, you can just go back:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nixos-rebuild switch --rollback</pre>

    <a href="/images/screenshots/nixos-grub.png">
      <img class="inline screenshot" src="/images/screenshots/nixos-grub-small.png" alt="Grub boot menu" />
    </a>

    <p>
      In fact, all old system configurations automatically show up in the Grub
      boot menu. So if the new configuration crashes or doesn’t boot properly,
      you can just roll back by selecting an older configuration in the
      <a href="/images/screenshots/nixos-grub.png">Grub boot menu</a>. Rollbacks
      are very fast: it doesn’t involve lots of files having to be restored
      from copies.
    </p>


    <h2 id="reproducible-system">Reproducible system configurations</h2>

    <p>
      NixOS’ declarative configuration model makes it easy to reproduce a system
      configuration on another machine (for instance, to test a change in a test
      environment before doing it on the production server). You just copy the
      <tt>configuration.nix</tt> file to the target NixOS machine and run
      <tt>nixos-rebuild switch</tt>. This will give you the same configuration
      (kernel, applications, system services, and so on) except for ‘mutable
      state’ (such as the stuff that lives in <tt>/var</tt>).
    </p>


    <h2 id="safe-to-test-changes">Safe to test changes</h2>

    <p>
      NixOS makes it safe to test potentially dangerous changes to the system,
      because you can always roll back. (Unless you screw up the boot loader,
      that is…) For instance, whether the change is as simple as enabling a
      system service, or as large as rebuilding the entire system with a new
      version of Glibc, you can test it by doing:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nixos-rebuild test</pre>

    <p>
      This builds and activates the new configuration, but doesn’t make it the
      boot default. Thus, rebooting the system will take you back to the
      previous, known-good configuration.
    </p>

    <p>
      An even nicer way to test changes is the following:
    </p>

    <pre class="terminal-console"><span class="shell-prompt">$ </span>nixos-rebuild build-vm
<span class="shell-prompt">$ </span>./result/bin/run-*-vm</pre>

    <p>
      This builds and starts a virtual machine that contains the new system
      configuration (i.e. a clone of the configuration of the host machine, with
      any changes that you made to <tt>configuration.nix</tt>). The VM doesn’t
      share any data with the host, so you can safely experiment inside the VM.
      The <tt>build-vm</tt> command is very efficient (it doesn’t require a disk
      image for the VM to be created), so it’s a very effective way to test
      changes.
    </p>
  </div>
</div>

[% END %]
