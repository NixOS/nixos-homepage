[% WRAPPER layout.tt title="NixOS Linux" hideTitle=1 menu='nixos' %]
[% USE JSON.Escape %]
[% USE IO.All %]
[% USE HTML %]
[% USE String %]

<link rel="alternate" type="application/rss+xml" title="RSS" href="/news-rss.xml" />

<div class="row-fluid">
  <div class="span6">
    <h1>Reproducible builds and deployments.</h1>
    <p class="lead">
      <strong>Nix</strong> is a powerful package manager for Linux and other
      Unix systems that makes package management reliable and reproducible.
      Share your development and build environments across different machines.
    </p>
    <p class="lead">
      <strong>NixOS</strong> is a Linux distribution with a unique approach to
      package and configuration management. Built on top of the Nix package
      manager, it is completely declarative, makes upgrading systems reliable,
      and has <a href="[% root %]features.html">many other advantages</a>.
    </p>
    <a class="btn btn-large btn-success" href="[% root %]download.html">Download</a>
    <a class="btn btn-large" href="[% root %]learn.html">Get started</a>
  </div>

  <div class="span6">
    <!-- TODO: Add a proper video / picture of NixOS in action! -->
    <!-- Fix needed for strict XML error complaining about "async" https://monkeyraptor.johanpaul.net/2015/11/fixing-xhtml-parsing-error-on-chrome.html -->
    <script id="asciicast-113463" src="https://asciinema.org/a/113463.js" async="async"></script>
  </div>
</div>

<hr />

<div class="row-fluid">
  <div class="span4">
    <h2>Reproducible</h2>
    <p>
      Nix builds packages in isolation from each other. This ensures that they
      are reproducible and don't have undeclared dependencies, so <strong>if a
        package works on one machine, it will also work on another</strong>.
    </p>
  </div>
  <div class="span4">
    <h2>Declarative</h2>
    <p>
      Nix makes it <strong>trivial to share development and build
        environments</strong> for your projects, regardless of what programming
      languages and tools you’re using.
    </p>
  </div>
  <div class="span4">
    <h2>Reliable</h2>
    <p>
      Nix’s ensures that installing or upgrading one package <strong>cannot
        break other packages</strong>. It allows you to <strong>roll back to
        previous versions</strong>, and ensures that no package is in an
      inconsistent state during an upgrade.
    </p>
  </div>
</div>


<hr />

<div id="packages-search" class="row-fluid text-center">
  <div class="span12">
    <h1>Choose from Thousands of Packages</h1>
    <p class="text-center lead">
      The Nix Packages collection (<a href="https://github/NixOS/nixpkgs">nixpkgs</a>) is a set of
      <strong>over 60 000 packages</strong> for the Nix package manager,
      released under a permissive <a href="https://spdx.org/licenses/MIT.html">MIT/X11 license</a>.
    </p>
    <form>
      <div class="input-append">
        <input class="input-xxlarge" placeholder="Search for packages" type="text" />
        <button class="btn">Search</button>
      </div>
      <p class="text-center">or <a href="[% root %]nixos/options.html">search among many NixOS options.</a></p>
    </form>
  </div>
</div>

<hr />

<h1 class="text-center">Examples...</h1>

<div id="features">

  <section>
    <div class="row-fluid">
      <div class="span6">

        <h2>Try new tools without fear</h2>
        <p>Don't clutter your system with tools that you use only now and then.</p>
        <pre class="well" style="margin-top:1em">
<span class="nix-command">python --version</span>
python: command not found
<span class="nix-command"><strong>nix-shell -p python3</strong></span>
(nix-shell)<span class="nix-command">python --version</span>
Python 3.7.7</pre>

        <h2>One tool, multiple languages</h2>
        <p></p>
        <pre class="well" style="margin-top:1em">
<span class="nix-command"><strong>nix-shell -p python3 nodejs go rustc</strong></span>
(nix-shell)<span class="nix-command">node --version</span>
v10.20.1
(nix-shell)<span class="nix-command">go version</span>
go version go1.14.1 linux/amd64
(nix-shell)<span class="nix-command">rustc --version</span>
rustc 1.42.0</pre>

      </div>
      <div class="span6">

        <h2>Isolated development environments</h2>
        <p>
          After you get familiar with <code>nix-shell -p</code> you can take
          the next step further and <a href="[%root%]learn.html">learn some
            Nix</a>. To setup a more persistent environment you can also write a
          simple <code>shell.nix</code> file:
        </p>
        <pre class="well" style="margin-top:1em">
{ pkgs ? import &lt;nixpkgs&gt; {}
}:
pkgs.mkShell {
  name = "dev-shell";
  buildInputs = [
    pkgs.python3
    pkgs.python3Packages.virtualenv
    pkgs.nodejs
    pkgs.yarn
  ];
}</pre>
        <p>Then enter development environment with:</p>
        <pre class="well" style="margin-top:1em">
<span class="nix-command"><strong>nix-shell</strong></span>
(nix-shell)<span class="nix-command">virtualenv --version</span>
16.7.9
(nix-shell)<span class="nix-command">yarn --version</span>
1.22.4</pre>
        <p>
          Commit the above <code>shell.nix</code> file and let you coworkers have
          easier time setting their development environment.
        </p>

      </div>
    </div>
  </section>
  <section class="tab-pane" id="build">
    <div class="row-fluid">
      <div class="span6">
        <h2>Minimal docker image</h2>
        <p>
          Declarative way to build minimal docker images. No build tools inside
          docker image, no complex multi stage build process, only what your
          application needs.
        </p>
        <p>
          The following Nix expression (<code>default.nix</code>) defines a
          docker image with <strong>only</strong> Python 3 installed in it.
        </p>
        <pre class="well" style="margin-top:1em">
{ pkgs ? import &lt;nixpkgs&gt; {}
}:
pkgs.dockerTools.buildLayeredImage {
  name = "only-hello";
  contents = [ pkgs.hello ];
}</pre>
        <p>To build and run the image you need to:</p>
        <pre class="well" style="margin-top:1em">
<span class="nix-command"><strong>nix-build</strong></span>
...
/nix/store/&#8230;-docker-image-only-hello.tar.gz
<span class="nix-command">docker load -i ./result</span>
...
Loaded image: only-hello:fgzj21lg3hjv8bxlaabcsfjkh4fg5ssk
<span class="nix-command">docker run only-hello hello"</span>
Hello World</pre>
        <p>
          Learn more <a href="[%root%]nixpkgs/manual/#sec-pkgs-dockerTools">how
            to build docker images</a>.
        </p>

      </div>
      <div class="span6">

        <h2>Declarative cloud images</h2>
        <p>How hard would it be to build and configure a <strong>Amazon EC2</strong> image?</p>
        <p>
          With the following <code>amazon.nix</code> we defined nginx which is
          serving example <code>/var/www</code> folder, having a valid ssl
          certificate (via LetsEncrypt) and enabled recommended security
          settings.
        </p>
        <pre class="well" style="margin-top:1em">
{ pkgs, ...}:
{
  security.acme.acceptTerms = true;
  security.acme.email = "nix@example.com";
  services.nginx = {
    enable = true;
    recommendedGzipSettings = true;
    recommendedOptimisation = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;
    virtualHosts."example.com" = {
      enableACME = true;
      forceSSL = true;
      locations."/".root = "/var/www";
    };
  };
}</pre>
        <p>Now we just need to build it.</p>
        <pre class="well" style="margin-top:1em">
<span class="nix-command"><strong>nix-build '&lt;nixpkgs/nixos/release.nix&gt;' \</strong></span>
<strong>    -A amazonImage.x86_64-linux \</strong>
<strong>    --arg configuration ./amazon.nix \</strong>
<strong>    -o ./result</strong>
...
<span class="nix-command">ls ./result/</span>
nixos-amazon-image-20.09pre130979.gfedcba-x86_64-linux.vhd
nix-support</pre>
      </div>
    </div>
  </section>
</div>

<style type="text/css" media="screen">
  #packages-search .input-append button.btn {
    font-size: 28px;
    height: 54px;
  }

  #packages-search .input-append input {
    font-size: 28px;
    height: 44px;
  }

  #features {
    margin: 0;
    margin-top: 30px;
    padding: 1em;
    border: 1px solid #DDDDDD;
    border-radius: 2px;
  }

  #features h2 {
    border: 0;
  }
</style>


[% END %]
