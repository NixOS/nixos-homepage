[% WRAPPER layout.tt title="NixOS Linux" %]
[% USE JSON.Escape %]
[% USE IO.All %]
[% USE HTML %]
[% USE String %]

<link rel="alternate" type="application/rss+xml" title="RSS" href="/news-rss.xml" />

<div class="side-by-side">
  <div class="hero">
    <h1>Reproducible builds and deployments.</h1>
    <p class="lead">
      <strong>Nix</strong> is a powerful package manager for Linux and other
      Unix systems that makes package management reliable and reproducible.
      Share your development and build environments across different machines.
    </p>
    <p class="lead">
      <strong>NixOS</strong> is a Linux distribution with a unique approach to
      package and configuration management. Built on top of the Nix package
      manager, it is completely declarative, makes upgrading systems reliable,
      and has <a href="[% root %]features.html">many other advantages</a>.
    </p>
    <a class="btn btn-large btn-success" href="[% root %]download.html">Download</a>
    <a class="btn btn-large" href="[% root %]learn.html">Get started</a>
  </div>

  <div class="hero-demo">
    <asciinema-player cols="77" rows="24" src="/demo.cast"></asciinema-player>
  </div>
</div>

<hr />

<div class="row-fluid">
  <div class="span4">
    <h2>Reproducible</h2>
    <p>
      Nix builds packages in isolation from each other. This ensures that they
      are reproducible and don't have undeclared dependencies, so <strong>if a
        package works on one machine, it will also work on another</strong>.
    </p>
  </div>
  <div class="span4">
    <h2>Declarative</h2>
    <p>
      Nix makes it <strong>trivial to share development and build
        environments</strong> for your projects, regardless of what programming
      languages and tools you’re using.
    </p>
  </div>
  <div class="span4">
    <h2>Reliable</h2>
    <p>
      Nix’s ensures that installing or upgrading one package <strong>cannot
        break other packages</strong>. It allows you to <strong>roll back to
        previous versions</strong>, and ensures that no package is in an
      inconsistent state during an upgrade.
    </p>
  </div>
</div>


<hr />

<div id="packages-search" class="row-fluid text-center">
  <div class="span12">
    <h1>Choose from Thousands of Packages</h1>
    <p class="text-center lead">
      The Nix Packages collection (<a href="https://github/NixOS/nixpkgs">nixpkgs</a>) is a set of
      <strong>over 60 000 packages</strong> for the Nix package manager.
    </p>
    <form>
      <div class="input-append">
        <input class="input-xxlarge" placeholder="Search for a package" type="text" />
        <button class="btn">Search</button>
      </div>
      <p class="text-center">or <a href="[% root %]nixos/options.html">search among many NixOS options.</a></p>
    </form>
  </div>
</div>

<hr />

<h1 class="text-center">Examples...</h1>

<div id="examples">

  <section>
    <div class="row-fluid">
      <div class="span6">

        <h2>Try new tools without fear</h2>
        <p>Don't clutter your system with tools that you use only now and then.</p>
        <pre class="well">
<span class="nix-command">python --version</span>
python: command not found
<span class="nix-command"><strong>nix-shell -p python3</strong></span>
(nix-shell)<span class="nix-command">python --version</span>
Python 3.7.7</pre>

        <h2>Multiple languages, one tool</h2>
        <p></p>
        <pre class="well">
<span class="nix-command"><strong>nix-shell -p python3 nodejs go rustc</strong></span>
(nix-shell)<span class="nix-command">node --version</span>
v10.20.1
(nix-shell)<span class="nix-command">go version</span>
go version go1.14.1 linux/amd64
(nix-shell)<span class="nix-command">rustc --version</span>
rustc 1.42.0</pre>

      </div>
      <div class="span6">

        <h2>Isolated development environments</h2>
        <p>
          After you get familiar with <code>nix-shell -p</code> you can take
          the next step and <a href="[%root%]learn.html">learn some
            Nix</a>. To setup a more persistent environment you can also write a
          simple <code>shell.nix</code> file:
        </p>
        <pre class="well">
{ pkgs ? import &lt;nixpkgs&gt; {}
}:
pkgs.mkShell {
  name = "dev-shell";
  buildInputs = [
    pkgs.python3
    pkgs.python3Packages.virtualenv
    pkgs.nodejs
    pkgs.yarn
  ];
}</pre>
        <p>Then enter development environment with:</p>
        <pre class="well">
<span class="nix-command"><strong>nix-shell</strong></span>
(nix-shell)<span class="nix-command">virtualenv --version</span>
16.7.9
(nix-shell)<span class="nix-command">yarn --version</span>
1.22.4</pre>
        <p>
          Commit the above <code>shell.nix</code> file and let you coworkers have
          easier time setting their development environment.
        </p>

      </div>
    </div>
  </section>
  <section class="tab-pane" id="build">
    <div class="row-fluid">
      <div class="span6">
        <h2>Minimal docker image</h2>
        <p>
          Using <code>Dockerfile</code> you are responsible to:
        </p>
        <ul>
          <li>clean up everything that is not needed at runtime</li>
          <li>decide how to split into layers for better caching</li>
        </ul>
        <p>
          Writing <code>Dockerfile</code> that would produce a minimal image is
          at best a very error prone process.
        </p>
        <p>
          With Nix you only include to docker image packages that you define.
          No cleaning up needed. There are no build tools left in your docker
          image, making it as minimal as you need.
        </p>
        <p>
          Nix also know how to layer your resulting docker image, automatically
          without you needed to do anything. The resulting layers are optimized
          for caching as much as possible.
        </p>
        <p>
          The following Nix expression (<code>default.nix</code>) defines a
          docker image with <strong>only</strong> <code>hello</code> package
          in it.
        </p>
        <pre class="well">
{ pkgs ? import &lt;nixpkgs&gt; {}
}:
pkgs.dockerTools.buildLayeredImage {
  name = "only-hello";
  contents = [ pkgs.hello ];
}</pre>
        <p>To build and run the image you need to:</p>
        <pre class="well">
<span class="nix-command"><strong>nix-build default.nix -o ./result</strong></span>
...
/nix/store/&#8230;-docker-image-only-hello.tar.gz
<span class="nix-command">docker load -i ./result</span>
1c31fbac2eb1: Loading layer [==================>]  1.649MB/1.649MB
03b22f688054: Loading layer [==================>]    256kB/256kB
29c350a9c392: Loading layer [==================>]  31.61MB/31.61MB
6a87e4d71e07: Loading layer [==================>]  266.2kB/266.2kB
c09c43a6b910: Loading layer [==================>]  71.68kB/71.68kB
Loaded image: only-hello:qn5x1pnk7d467jsl81jng7168qsks42l
<span class="nix-command">docker run only-hello:qn5x1pnk7d467jsl81jng7168qsks42l hello"</span>
Hello, world</pre>
        <p>
          Learn more <a href="[%root%]nixpkgs/manual/#sec-pkgs-dockerTools">how
            to build docker images</a>.
        </p>

      </div>
      <div class="span6">

        <h2>Declarative cloud images</h2>
        <p>How hard would it be to build and configure a <strong>Amazon EC2</strong> image?</p>
        <p>
          With the following <code>amazon.nix</code> we configured nginx which is
          serving a "Welcome to nginx!" page, having a valid ssl certificate
          (via LetsEncrypt) and enabled recommended security settings.
        </p>
        <pre class="well">
{ pkgs, ...}:
{
  security.acme.acceptTerms = true;
  security.acme.email = "nix@example.com";
  services.nginx = {
    enable = true;
    recommendedGzipSettings = true;
    recommendedOptimisation = true;
    recommendedProxySettings = true;
    recommendedTlsSettings = true;
    virtualHosts."example.com" = {
      enableACME = true;
      forceSSL = true;
      locations."/".root = "${pkgs.nginx}/html";
    };
  };
}</pre>
        <p>Now we just need to build it.</p>
        <pre class="well">
<span class="nix-command"><strong>nix-build '&lt;nixpkgs/nixos/release.nix&gt;' \</strong></span>
<strong>    -A amazonImage.x86_64-linux \</strong>
<strong>    --arg configuration ./amazon.nix \</strong>
<strong>    -o ./result</strong>
...
<span class="nix-command">ls ./result/</span>
nixos-amazon-image-20.09pre130979.gfedcba-x86_64-linux.vhd
nix-support</pre>
        <p>
          The resulting Virtual Hard Disk image can be then be
          <a href="https://docs.aws.amazon.com/vm-import/latest/userguide/vmimport-image-import.html">
            imported to Amazon EC2 as usual</a>.
        </p>
      </div>
    </div>
  </section>
</div>

[% END %]
