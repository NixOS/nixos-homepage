---
import { cva, type VariantProps } from 'class-variance-authority';

import SHA from '@/components/ui/SHA.astro';
import Link from '@/components/util/Link.astro';
import { Icon } from 'astro-icon/components';

export const buttonVariants = cva(
  'font-bold transition-colors text-center gap-4',
  {
    variants: {
      color: {
        orange:
          'bg-nix-orange hover:bg-nix-orange-hover drop-shadow text-white',
        lightblue:
          'bg-nix-blue-light hover:bg-nix-blue-light-hover drop-shadow text-white',
        semidarkblue:
          'bg-nix-blue-dark hover:bg-nix-blue-dark-hover drop-shadow text-white',
        green: 'bg-nix-green hover:bg-nix-green-hover drop-shadow text-white',
        'white-borders':
          'border-3 border-white-dark text-white hover:bg-nix-blue-transparent',
        white: 'bg-white hover:bg-nix-blue-lighter !text-nix-blue-dark',
        nixblue: 'bg-nix-blue hover:bg-nix-blue-hover drop-shadow text-white',
      },
      size: {
        sm: 'px-10 py-2.5 rounded-3xl',
        'sm-mobfull': 'px-8 py-2.5 rounded-3xl md:w-auto w-full',
        lg: 'px-10 py-2.5 rounded-2xl md:px-14 md:py-4 w-full md:w-auto',
        'log-nopadding': 'px-0 pl-6 py-2.5 md:py-4 rounded-2xl w-full',
        'lg-full': 'px-10 py-4 rounded-2xl block',
      },
    },
  },
);

interface Props extends VariantProps<typeof buttonVariants> {
  href?: string | null;
  type?: 'button' | 'submit' | 'reset';
  classList?: string[];
  shaHref?: string | null;
  shaClassList?: string[];
  shaText?: string;
  label?: string;
  nonPublic?: boolean;
  icon?: string;
}

const {
  color = 'orange',
  size = 'sm',
  href = null,
  type = 'button',
  classList = '',
  shaHref = null,
  shaClassList = [],
  shaText = '',
  label,
  nonPublic = false,
  icon = undefined,
} = Astro.props;

const setIconSize = (size: string) => {
  switch (size) {
    case 'sm':
      return 24;
    case 'sm-mobfull':
      return 24;
    case 'lg':
      return 32;
    case 'log-nopadding':
      return 32;
    case 'lg-full':
      return 32;
    default:
      return 32;
  }
};
---

{
  href ? (
    <>
      <Link
        href={href}
        class:list={[
          'no-underline!',
          buttonVariants({ color, size }),
          nonPublic && 'inline-flex items-center gap-2',
          classList,
          icon && 'flex items-center justify-start gap-4',
        ]}
      >
        {icon && <Icon name={icon} size={setIconSize(size)} />}
        {nonPublic && <Icon name="mdi:lock" />}
        {label || <slot />}
      </Link>
      {shaHref && (
        <SHA href={shaHref} classList={shaClassList}>
          {shaText}
        </SHA>
      )}
    </>
  ) : (
    <button
      type={type}
      class:list={[
        'no-underline!',
        buttonVariants({ color, size }),
        nonPublic && 'inline-flex items-center gap-2',
        classList,
        icon && 'flex items-center justify-start gap-4',
      ]}
    >
      {icon && <Icon name={icon} />}
      <slot />
    </button>
  )
}
