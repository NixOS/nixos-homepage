---
import { AsciinemaSettings } from 'asciinema-player';
import 'asciinema-player/dist/bundle/asciinema-player.css';

interface Props {
  src: string;
  settings?: AsciinemaSettings;
  class?: string;
  title?: string;
}

const defaultSettings = {
  cols: 81,
  rows: 24,
  autoPlay: false,
  loop: true,
  controls: true,
  fit: 'width',
  terminalFontFamily: 'Fira Code Variable',
};

const {
  src,
  settings = {},
  class: extraClasses = '',
  title = undefined,
}: Props = Astro.props;

const demoId = 'asciinema-demo-' + src.split('/').pop().split('.')[0];
---

<>
  {
    title && (
      <a href={`#${demoId}`} class="no-underline!" id={`${demoId}-link`}>
        <h3 class="font-heading text-nix-blue text-xl font-bold">{title}</h3>
      </a>
    )
  }
  <asciinema-player
    id={demoId}
    class={extraClasses}
    data-src={src}
    data-title={title}
    data-settings={JSON.stringify({ ...defaultSettings, ...settings })}
  >
  </asciinema-player>
</>

<script>
  import * as AsciinemaPlayer from 'asciinema-player';
  class Asciinema extends HTMLElement {
    constructor() {
      super();
      const src = this.dataset.src;
      const settings = JSON.parse(this.dataset.settings);

      if (window.location.hash === `#${this.id}`) {
        settings.autoPlay = true;
      }

      document.fonts.load('1em ' + settings.terminalFontFamily).then(() => {
        const player = AsciinemaPlayer.create(src, this, settings);

        if (this.dataset.title) {
          document
            .getElementById(`${this.id}-link`)
            .addEventListener('click', () => {
              player.play();
            });
        }
      });
    }
  }

  customElements.define('asciinema-player', Asciinema);
</script>

<style is:global>
  @reference "./../../styles/base.css";

  .ap-play-button {
    @apply !relative;
  }
  .ap-terminal {
    @apply transform-gpu;
  }
</style>
