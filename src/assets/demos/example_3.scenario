#! { "step": 0.10, "width": 77, "height": 20 }

$ # You can also persist your development environment.
$ # Here is a short example with python and nodejs:
$ cat -n shell.nix
     1  { pkgs ? import <nixpkgs> {} # here we import the nixpkgs package set
     2  }:
     3  pkgs.mkShell {               # mkShell is a helper function
     4    name="dev-environment";    # that requires a name
     5    buildInputs = [            # and a list of packages
     6      pkgs.python3
     7      pkgs.python3Packages.virtualenv
     8      pkgs.nodejs
     9      pkgs.yarn
    10    ];
    11    shellHook = ''             # bash to run when you enter the shell
    12      echo "Start developing..."
    13    '';
    14  }
$ # Pause the video to read and understand the shell.nix
$ # To enter the dev-environment simply run:
$ nix-shell
Start developing...
(nix-shell) $ python --version
Python 3.7.7
(nix-shell) $ virtualenv --version
16.7.9
(nix-shell) $ # With python and virtualenv you should be ready to start
(nix-shell) $ # your python project
(nix-shell) $ node --version
v10.20.1
(nix-shell) $ yarn --version
1.22.4
(nix-shell) $ # Having node and yarn in PATH you already know you can
(nix-shell) $ # do all the good stuff with nodejs
(nix-shell) $ exit
$ # How hard is it in your company to share the same version of required
$ # tooling across different machines?
