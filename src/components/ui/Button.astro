---
import { cva, type VariantProps } from 'class-variance-authority';

import SHA from '@/components/ui/SHA.astro';
import Link from '@/components/util/Link.astro';

export const buttonVariants = cva(
  'font-bold text-white drop-shadow transition-colors text-center',
  {
    variants: {
      color: {
        orange: 'bg-nix-orange hover:bg-nix-orange-hover',
        lightblue: 'bg-nix-blue-light hover:bg-nix-blue-light-hover',
        semidarkblue: 'bg-nix-blue-dark hover:bg-nix-blue-dark-hover',
        green: 'bg-nix-green hover:bg-nix-green-hover',
      },
      size: {
        sm: 'px-10 py-2.5 rounded-3xl',
        'sm-mobfull': 'px-8 py-2.5 rounded-3xl md:w-auto w-full',
        lg: 'px-10 py-2.5 rounded-2xl md:px-14 md:py-4 w-full md:w-auto',
        'lg-full': 'px-10 py-4 rounded-2xl block',
      },
    },
  },
);

interface Props extends VariantProps<typeof buttonVariants> {
  href?: string | null;
  type?: 'button' | 'submit' | 'reset';
  classList?: string[];
  shaHref?: string | null;
  shaClassList?: string[];
  shaText?: string;
  label?: string;
}

const {
  color = 'orange',
  size = 'sm',
  href = null,
  type = 'button',
  classList = [],
  shaHref = null,
  shaClassList = [],
  shaText = '',
  label,
} = Astro.props;
---

{
  href ? (
    <>
      <Link
        href={href}
        class:list={[
          '!text-white !no-underline',
          buttonVariants({ color, size }),
          classList,
        ]}
      >
        {label || <slot />}
      </Link>
      {shaHref && (
        <SHA href={shaHref} classList={shaClassList}>
          {shaText}
        </SHA>
      )}
    </>
  ) : (
    <button type={type} class={buttonVariants({ color, size })}>
      <slot />
    </button>
  )
}
