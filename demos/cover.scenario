#! { "step": 0.10, "width": 84, "height": 20 }

# Instructions:
# * empty lines will be skipped
# * lines starting with "#" will be skipped
# * lines starting with "$ " will be typed
# * lines starting with "(nix-shell) $ " will be typed
# * lines starting with "--" will clear the screen
# * every line after "#" will be a little brighter
# * everything else will be printed immediately

$ # Hi!
$ # Wondering how to start using Nix?
$ # Here are a few examples:

--

$ node -e "console.log(1+1)"
node: command not found
$ # Interesting, no node on this machine
$ # No problem with Nix!
$ nix-shell -p nodejs
(nix-shell) $ node -e "console.log(1+1)"
2
(nix-shell) $ # And now our environment has node.
(nix-shell) $ # Without cluttering the user environment! :)

--

$ # Typing "nix-shell -p ..." each time can be tedious. We can do better.
$ # We can write everything down in shell.nix
$ cat -n shell.nix
     1  {
     2    pkgs ? import <nixpkgs> { }, # here we import the nixpkgs packages
     3  }:
     4  # mkShell is a helper function
     5  pkgs.mkShell {
     6    name = "dev-environment"; # that requires a name
     7    buildInputs = [
     8      # and a list of packages
     9      pkgs.nodejs
    10    ];
    11    shellHook = ''
    12      # bash to run when you enter the shell
    13      echo "Start developing..."
    14    '';
    15  }
$ # This snippet provides a developer environment named "dev-environment"
$ # with the node command line tool available
$ # and which will print "Start developing..." on first start.
$ # To enter this developer environment, run:
$ nix-shell
Start developing...
(nix-shell) $ node -e "console.log(1+1)"
2
(nix-shell) $ # Now go ahead and commit shell.nix to your repository
(nix-shell) $ # and share your development environment with your coworkers

--

$ # For the last example, let us build a minimal docker image with Nix
$ cat -n docker-redis.nix
    1  {
    2    # nixpkgs package set
    3    pkgs ? import <nixpkgs> { system = "x86_64-linux"; },
    4  }:
    5  pkgs.dockerTools.buildLayeredImage {
    6    # helper to build docker image
    7    name = "nix-redis"; # give docker image a name
    8    tag = "latest"; # provide a tag
    9    contents = [ pkgs.redis ]; # packages in docker image
   10  }
$ # This snippet constructs a docker image named "nix-redis"
$ # with the tag "latest" and containing the package redis
$ # which includes the command-line tool redis and all its runtime dependencies.
$ # Now let's build this docker image and load it into docker:
$ nix-build docker-redis.nix -o ./result
... SKIPPING OUTPUT ...
/nix/store/1crapx24sjgqm2j1wmq17k6f6a9wy66d-docker-image-nix-redis.tar.gz
$ docker load -i ./result
Loaded image: nix-redis:latest
$ docker images | grep redis
debian-redis  latest    8366943c77e8     3 days ago       136MB
alpine-redis  latest    aae644cd3417     3 days ago       6.99MB
nix-redis     latest    30486183a209     50 years ago     45.4MB
$ # The size of our docker image is somewhere between a Debian and
$ # an Alpine image
$ # The redis packaged in nixpkgs is not optimized for small size
$ # Let us fix this!
$ cat -n redis-minimal.nix
    1  {
    2    pkgs ? import <nixpkgs> { system = "x86_64-linux"; },
    3  }: # nixpkgs package set
    4  pkgs.redis.override {
    5    withSystemd = false;  # Build without systemd
    6    tlsSupport = false;  # Build without tls support
    7    useSystemJemalloc = false;  # Dont use system jemalloc
    8  }).overrideAttrs (old: {
    9    doCheck = false;  # So we dont wait for tests
   10    preBuild = ''
   11      makeFlagsArray=(PREFIX="$out"
   12                      CC="${pkgs.musl.dev}/bin/musl-gcc -static"
   13                      CFLAGS="-I${pkgs.musl.dev}/include -static"
   14                      LDFLAGS="-L${pkgs.musl.dev}/lib -static");
   15    '';  # Static build
   16    # Let's remove some binaries which we don't need
   17    postInstall = "rm -f $out/bin/redis-{benchmark,check-*,cli}";
   18  })
$ # In redis-minimal.nix we override the default redis build with three changes:
$ # 1.) Remove the redis systemd support
$ # 2.) Build a statically linked binary with musl
$ # 3.) Remove all binaries apart from redis-server
$ # Now let's build the docker image with our newly created minimal redis
$ cat -n docker-redis-minimal.nix
    1  {
    2    pkgs ? import <nixpkgs> { system = "x86_64-linux"; },
    3  }: # nixpkgs package set
    4  let
    5    redisMinimal = import ./redis-minimal.nix { inherit pkgs; };
    6  in
    7  pkgs.dockerTools.buildLayeredImage {
    8    name = "nix-redis-minimal";  # give docker image a name
    9    tag = "latest";  # provide a tag
   10    fromImage = null;  # scratch image as base image
   11    created = "now";  # set creation time
   12    contents = [ redisMinimal ]; # use redisMinimal package
   13    config = {
   14      Env = ["PATH=/bin"];
   15      Cmd = [ "/bin/redis-server" ];  # run redis-server on start
   16    };  
   17  }
$ # Let's build the new docker image now
$ nix-build docker-redis-minimal.nix -o ./result 
... SKIPPING OUTPUT ...
/nix/store/83zcgs5xvzrgx09iv8s82wkabl8xkr03-docker-image-nix-redis-minimal.tar.gz
$ docker load -i ./result
Loaded image: nix-redis-minimal:latest
$ docker images | grep redis
debian-redis         latest    8366943c77e8    3 days ago      136MB
alpine-redis         latest    aae644cd3417    3 days ago      6.99MB
nix-redis            latest    30486183a209    50 years ago    45.4MB
nix-redis-minimal    latest    a21238890680    50 years ago    2.02MB
$ # Did we just produce a docker image _smaller_ than Alpine? Interesting!
$ # Go tell your friends :)

--

$ # This was a quick taste of what Nix can do.
$ # I hope we made you eager to try it for yourself.
$ # Happy Nixing!

