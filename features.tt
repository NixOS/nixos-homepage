[% WRAPPER layout.tt title="Features" %]

<div class="row">
  <div class="span6">
    <div class="page-header">
      <h1>About Nix</h1>
    </div>
    <p>Nix is a <em>purely functional package manager</em>. This means
      that it treats packages like values in purely functional programming
      languages such as Haskell — they are built by functions that don’t
      have side-effects, and they never change after they have been built.
      Nix stores packages in the <em>Nix store</em>, usually the directory
      <tt>/nix/store</tt>, where each package has its own unique
      subdirectory such as

    </p>

    <pre class="code">/nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/
</pre>

    <p>

      where <tt>b6gvzjyb2pg0…</tt> is a unique identifier for the package that
      captures all its dependencies (it’s a cryptographic hash of the
      package’s build dependency graph). This enables many powerful
      features.</p>


    <h3>Multiple versions</h3>

    <p>You can have multiple versions or variants of a package installed
      at the same time. This is especially important when different
      applications have dependencies on different versions of the same
      package — it prevents the “DLL hell”. Because of the hashing scheme,
      different versions of a package end up in different paths in the Nix
      store, so they don’t interfere with each other.</p>

    <p>An important consequence is that operations like upgrading or
      uninstalling an application cannot break other applications, since
      these operations never “destructively” update or delete files that are
      used by other packages.</p>


    <h3>Complete dependencies</h3>

    <p>Nix helps you make sure that package dependency specifications are
      complete. In general, when you’re making a package for a package
      management system like RPM, you have to specify for each package what
      its dependencies are, but there are no guarantees that this
      specification is complete. If you forget a dependency, then the
      component will build and work correctly on <em>your</em> machine if
      you have the dependency installed, but not on the end user's machine
      if it's not there.</p>

    <p>Since Nix on the other hand doesn’t install packages in “global”
      locations like <tt>/usr/bin</tt> but in package-specific directories,
      the risk of incomplete dependencies is greatly reduced. This is
      because tools such as compilers don’t search in per-packages
      directories such as
      <tt>/nix/store/5lbfaxb722zp…-openssl-0.9.8d/include</tt>, so if a
      package builds correctly on your system, this is because you specified
      the dependency explicitly.</p>

    <p>Runtime dependencies are found by scanning binaries for the hash
      parts of Nix store paths (such as <tt>r8vvq9kq…</tt>). This may sound
      risky, but it works extremely well.</p>


    <h3>Multi-user support</h3>

    <p>Starting at version 0.11, Nix has multi-user support. This means
      that non-privileged users can securely install software. Each user
      can have a different <em>profile</em>, a set of packages in the Nix
      store that appear in the user’s <tt>PATH</tt>. If a user installs a
      package that another user has already installed previously, the
      package won’t be built or downloaded a second time. At the same time,
      it is not possible for one user to inject a Trojan horse into a
      package that might be used by another user.</p>


    <h3>Atomic upgrades and rollbacks</h3>

    <p>Since package management operations never overwrite packages in the
      Nix store but just add new versions in different paths, they are
      <em>atomic</em>. So during a package upgrade, there is no time window
      in which the package has some files from the old version and some
      files from the new version — which would be bad because a program
      might well crash if it’s started during that period.</p>

    <p>And since packages aren’t overwritten, the old versions are still
      there after an upgrade. This means that you can <em>roll back</em> to
      the old version:</p>

    <pre class="code"><span class="nix-command">nix-env --upgrade <em>some-packages</em></span>
<span class="nix-command">nix-env --rollback</span>
</pre>


    <h3>Garbage collection</h3>

    <p>When you uninstall a package like this…</p>

    <pre class="code"><span class="nix-command">nix-env --uninstall firefox</span>
</pre>

    <p>the package isn’t deleted from the system right away (after all,
      you might want to do a rollback, or it might be in the profiles of
      other users). Instead, unused packages can be deleted safely by
      running the <em>garbage collector</em>:</p>

    <pre class="code"><span class="nix-command">nix-collect-garbage</span>
</pre>

    <p>This deletes all packages that aren’t in use by any user profile or
      by a currently running program.</p>


    <h3>Functional package language</h3>

    <p>Packages are built from <em>Nix expressions</em>, which is a simple
      functional language. A Nix expression describes everything that goes
      into a package build action (a “derivation”): other packages, sources,
      the build script, environment variables for the build script, etc.
      Nix tries very hard to ensure that Nix expressions are
      <em>deterministic</em>: building a Nix expression twice should yield
      the same result.</p>

    <p>Because it’s a functional language, it’s easy to support building
      variants of a package: turn the Nix expression into a function and
      call it any number of times with the appropriate arguments. Due to
      the hashing scheme, variants don’t conflict with each other in the Nix
      store.</p>


    <h3>Transparent source/binary deployment</h3>

    <p>Nix expressions generally describe how to build a package from
      source, so an installation action like</p>

    <pre class="code"><span class="nix-command">nix-env --install firefox</span>
</pre>

    <p><em>could</em> cause quite a bit of build activity, as not only
      Firefox but also all its dependencies (all the way up to the C library
      and the compiler) would have to built, at least if they are not
      already in the Nix store. This is a <em>source deployment model</em>.
      For most users, building from source is not very pleasant as it takes
      far too long. However, Nix can automatically skip building from
      source and instead use a <em>binary cache</em>, a web server that
      provides pre-built binaries. For instance, when asked to build
      <tt>/nix/store/b6gvzjyb2pg0…-firefox-33.1</tt> from source, Nix would
      first check if the file
      <tt>http://cache.nixos.org/b6gvzjyb2pg0….narinfo</tt> exists, and if
      so, fetch the pre-built binary referenced from there; otherwise, it
      would fall back to building from source.</p>


    <!--
<h3>Binary patching</h3>

<p>In addition to downloading binaries automatically if they’re
available, Nix can download binary deltas that patch an existing
package in the Nix store into a new version.  This speeds up
upgrades.</p>
-->


    <h3>Nix Packages collection</h3>

    <p>We provide a large set of Nix expressions containing thousands of
      existing Unix packages, the <a href="../nixpkgs"><em>Nix Packages
          collection</em> (Nixpkgs)</a>.</p>


    <h3>Managing build environments</h3>

    <p>Nix is extremely useful for developers as it makes it easy to
      automatically set up the build environment for a package. Given a
      Nix expression that describes the dependencies of your package, the
      command <strong>nix-shell</strong> will build or download those
      dependencies if they’re not already in your Nix store, and then start
      a Bash shell in which all necessary environment variables (such as
      compiler search paths) are set.</p>

    <p>For example, the following command gets all dependencies of the Pan
      newsreader, as described by <a
        href="https://github.com/NixOS/nixpkgs/blob/master/pkgs/applications/networking/newsreaders/pan/default.nix">its
        Nix expression</a>:</p>

    <pre><span class="nix-command">nix-shell '&lt;nixpkgs&gt;' -A pan</span>
</pre>

    <p>You’re then dropped into a shell where you can edit, build and test
      the package:</p>

    <pre><span class="nix-shell-command">tar xf $src</span>
<span class="nix-shell-command">cd pan-*</span>
<span class="nix-shell-command">./configure</span>
<span class="nix-shell-command">make</span>
<span class="nix-shell-command">./pan/gui/pan</span>
</pre>

    <p>Since Nix packages are reproducible and have complete dependency
      specifications, Nix makes an excellent basis for <a href="https://github.com/NixOS/hydra">a continuous build
        system</a>.</p>


    <h3>Portability</h3>

    <p>Nix runs on Linux and macOS.</p>


    <h3>NixOS</h3>

    <p>NixOS is a Linux distribution based on Nix. It uses Nix not just
      for package management but also to manage the system configuration
      (e.g., to build configuration files in <tt>/etc</tt>). This means,
      among other things, that it is easy to roll back the entire
      configuration of the system to an earlier state. Also, users can
      install software without root privileges. <a href="/">Read
        more…</a></p>


    <h3>License</h3>

    <p>Nix is released under the terms of the <a href="https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html">GNU
        LGPLv2.1 or (at your option) any later version</a>.</p>

  </div>
  <div class="span6">
    <div class="page-header">
      <h1>About NixOS</h1>
    </div>

    <p>NixOS is a GNU/Linux distribution that aims to
      improve the state of the art in system configuration management. In
      existing distributions, actions such as upgrades are dangerous:
      upgrading a package can cause other packages to break, upgrading an
      entire system is much less reliable than reinstalling from scratch,
      you can’t safely test what the results of a configuration change will
      be, you cannot easily undo changes to the system, and so on. We want
      to change that. NixOS has many innovative features:</p>


    <h3>Declarative system configuration model</h3>

    <p>In NixOS, the entire operating system — the kernel, applications,
      system packages, configuration files, and so on — is built by the <a href="/nix">Nix package manager</a> from a
      description in a purely
      functional build language. The fact that it’s purely functional
      essentially means that building a new configuration cannot overwrite
      previous configurations. Most of the other features follow from
      this.</p>

    <p>You configure a NixOS system by writing a specification of the
      functionality that you want on your machine in
      <tt>/etc/nixos/configuration.nix</tt>. For instance, here is a
      minimal configuration of a machine running an SSH daemon:</p>

    <pre class="code">{
  boot.loader.grub.device = "/dev/sda";

  fileSystems."/".device = "/dev/sda1";

  services.sshd.enable = true;
}
</pre>

    <p>After changing <tt>/etc/nixos/configuration.nix</tt>, you realise
      the configuration by running this command:</p>

    <pre class="code">$ nixos-rebuild switch
</pre>

    <p>This command does everything necessary to make the configuration
      happen, including downloading and compiling OpenSSH, generating the
      configuration files for the SSH server, and so on.</p>


    <h3>Reliable upgrades</h3>

    <p>Another advantage of purely functional package management is that
      <tt>nixos-rebuild switch</tt> will always produce the same result,
      regardless of what packages or configuration files you already had on
      your system. Thus, upgrading a system is as reliable as reinstalling
      from scratch.</p>


    <h3>Atomic upgrades</h3>

    <p>NixOS has a <em>transactional</em> approach to configuration
      management: configuration changes such as upgrades are
      <em>atomic</em>. This means that if the upgrade to a new
      configuration is interrupted — say, the power fails half-way through —
      the system will still be in a consistent state: it will either boot in
      the old or the new configuration. In most other systems, you’ll end
      up in an inconsistent state, and your machine may not even boot
      anymore.</p>


    <h3>Rollbacks</h3>

    <p>Because the files of a new configuration don’t overwrite old ones,
      you can (atomically) roll back to a previous configuration. For
      instance, if after a <tt>nixos-rebuild switch</tt> you discover that
      you don’t like the new configuration, you can just go back:</p>

    <pre class="code">$ nixos-rebuild switch --rollback
</pre>

    <a href="/images/screenshots/nixos-grub.png"><img class="inline screenshot"
        src="/images/screenshots/nixos-grub-small.png" alt="Grub boot menu" /></a>

    <p>In fact, all old system configurations automatically show up in the
      Grub boot menu. So if the new configuration crashes or doesn’t boot
      properly, you can just roll back by selecting an older configuration
      in the <a href="/images/screenshots/nixos-grub.png">Grub boot
        menu</a>. Rollbacks are very fast: it doesn’t involve lots of files
      having to be restored from copies.</p>


    <h3>Reproducible system configurations</h3>

    <p>NixOS’ declarative configuration model makes it easy to reproduce a
      system configuration on another machine (for instance, to test a
      change in a test environment before doing it on the production
      server). You just copy the <tt>configuration.nix</tt> file to the
      target NixOS machine and run <tt>nixos-rebuild switch</tt>. This will
      give you the same configuration (kernel, applications, system
      services, and so on) except for ‘mutable state’ (such as the stuff
      that lives in <tt>/var</tt>).</p>


    <h3>Safe to test changes</h3>

    <p>NixOS makes it safe to test potentially dangerous changes to the
      system, because you can always roll back. (Unless you screw up the
      boot loader, that is…) For instance, whether the change is as simple
      as enabling a system service, or as large as rebuilding the entire
      system with a new version of Glibc, you can test it by doing:</p>

    <pre class="code">$ nixos-rebuild test
</pre>

    <p>This builds and activates the new configuration, but doesn’t make
      it the boot default. Thus, rebooting the system will take you back to
      the previous, known-good configuration.</p>

    <p>An even nicer way to test changes is the following:</p>

    <pre class="code">$ nixos-rebuild build-vm
$ ./result/bin/run-*-vm
</pre>

    <p>This builds and starts a virtual machine that contains the new
      system configuration (i.e. a clone of the configuration of the host
      machine, with any changes that you made to
      <tt>configuration.nix</tt>). The VM doesn’t share any data with the
      host, so you can safely experiment inside the VM. The
      <tt>build-vm</tt> command is very efficient (it doesn’t require a disk
      image for the VM to be created), so it’s a very effective way to test
      changes.</p>


    <h3>Source-based model, with binaries</h3>

    <p>The Nix build language used by NixOS specifies how to build
      packages from source. This makes it easy to adapt the system — just
      edit any of the ‘Nix expressions’ for NixOS or Nixpkgs in
      <tt>/etc/nixos</tt>, and run <tt>nixos-rebuild</tt>. However,
      building from source is also slow. Therefore Nix automatically
      downloads pre-built binaries from <tt>nixos.org</tt> if they are
      available. This gives the flexibility of a source-based package
      management model with the efficiency of a binary model.</p>


    <h3>Consistency</h3>

    <p>The Nix package manager ensures that the running system is
      ‘consistent’ with the logical specification of the system, meaning
      that it will rebuild all packages that need to be rebuilt. For
      instance, if you change the kernel, Nix will ensure that external
      kernel modules such as the NVIDIA driver will be rebuilt as well — so
      you never run into an X server that mysteriously fails to start after
      a kernel security upgrade. And if you update the OpenSSL library, Nix
      ensures that all packages in the system use the new version, even
      packages that statically link against OpenSSL.</p>


    <h3>Multi-user package management</h3>

    <p>On NixOS, you do not need to be root to install software. In
      addition to the system-wide ‘profile’ (set of installed packages), all
      user have their own profile in which they can install packages. Nix
      allows multiple versions of a package to coexist, so different users
      can have different versions of the same package installed in their
      respective profiles. If two users install the same version of a
      package, only one copy will be built or downloaded, and Nix’s security
      model ensures that this is secure. Users cannot install
      <tt>setuid</tt> binaries.</p>


    <section>
      <h2>How does NixOS work?</h2>

      <p>NixOS is based on <a href="/nix">Nix</a>, a purely functional
        package management system. Nix stores all packages in isolation from
        each other under paths such as</p>

      <pre class="code">/nix/store/5rnfzla9kcx4mj5zdc7nlnv8na1najvg-firefox-3.5.4/
</pre>

      <p>The string <tt>5rnf...</tt> is a cryptographic hash of all input
        used to build the package. Packages are never overwritten after they
        have been built; instead, if you change the build description of a
        package (its ‘Nix expression’), it’s rebuilt and installed in a
        different path in <tt>/nix/store</tt> so it doesn’t interfere with the
        old version. NixOS extends this by using Nix not only to build
        packages, but also things like configuration files. For instance, the
        configuration of the SSH daemon is also built from a Nix expression
        and stored under a path like</p>

      <pre class="code">/nix/store/s2sjbl85xnrc18rl4fhn56irkxqxyk4p-sshd_config
</pre>

      <p>By building entire system configurations from a Nix expression,
        NixOS ensures that such configurations don’t overwrite each other, can
        be rolled back, and so on.</p>

      <p>A big implication of the way that Nix/NixOS stores packages is that
        there is no <tt>/bin</tt>, <tt>/sbin</tt>, <tt>/lib</tt>,
        <tt>/usr</tt>, and so on. Instead all packages are kept in
        <tt>/nix/store</tt>. (The only exception is a symlink
        <tt>/bin/sh</tt> to Bash in the Nix store.) Not using ‘global’
        directories such as <tt>/bin</tt> is what allows multiple versions of
        a package to coexist. Nix does have a <tt>/etc</tt> to keep
        system-wide configuration files, but most files in that directory are
        symlinks to generated files in <tt>/nix/store</tt>.</p>

    </section>


    <section>
      <h2>Status</h2>

      <p>NixOS is <a href="download.html">available for download</a>. Since
        NixOS is a relatively young Linux distribution, you may find that
        certain things that you need are missing (e.g., certain packages or
        support for specific hardware), so you may need to add those yourself.
        Here are some highlights of what NixOS currently provides:</p>

      <ul>

        <li>NixOS provides a complete X11/Plasma 5 desktop environment. Other
          window managers and part of Gnome are also available.</li>

        <li>NixOS uses <a href="https://www.freedesktop.org/wiki/Software/systemd">systemd</a> to
          manage system services. It supports quite a few <a
            href="https://github.com/NixOS/nixpkgs/tree/master/nixos/modules/services">services</a>
          (e.g., Apache HTTPD, PostgreSQL, and Tomcat) that can be configured
          declaratively through <tt>configuration.nix</tt>.</li>

        <li>NixOS build on the <a href="/nixpkgs">Nix Packages
            collection</a> (Nixpkgs), which provides Nix expressions for over
          40 000 packages that you can install under NixOS.</li>

        <li>NixOS has automatic hardware detection: the boot process loads
          kernel modules for all known devices automatically. It also has
          CUPS for printing, support for various wireless cards, and so on.</li>

        <li>NixOS currently runs on 32-bit and 64-bit x86 machines
          (<tt>i686-linux</tt> and <tt>x86_64-linux</tt>), and experimentally
          on ARM.</li>

      </ul>

    </section>

    <section>
      <h2>License</h2>

      <p>NixOS is free software, released under a <a
          href="https://github.com/NixOS/nixpkgs/blob/master/nixos/COPYING">permissive
          MIT/X11 license</a>.</p>

    </section>

  </div>
</div>

[% END %]
