#!/bin/sh

# This script installs the Nix package manager on your system by
# downloading a binary distribution and running its installer script
# (which in turn creates and populates /nix).

{ # Prevent execution if this script was only partially downloaded
require_util() {
    type "$1" > /dev/null 2>&1 || which "$1" > /dev/null 2>&1 ||
        oops "you do not have '$1' installed, which I need to $2"
}
require_util curl "download the binary tarball"
require_util bzcat "decompress the binary tarball"
require_util tar "unpack the binary tarball"
require_util shasum "verify the binary tarball"

oops() {
    echo "$0:" "$@" >&2
    exit 1
}

retain=
if [ -n "$NIX_DL" ] && [ -d "$NIX_DL" ]; then
    tmpDir="$NIX_DL"
    retain="true"
    echo "Reusing data at $tmpDir"
else
    tmpDir="$(mktemp -d -t nix-binary-tarball-unpack.XXXXXXXXXX || \
        oops "Can\'t create temporary directory for downloading the Nix binary tarball")"
fi
cleanup() {
    if [ "$retain" == "true" ]; then
        exec 1>&2
        echo ">>> Failed. Retaining download at $tmpDir"
        echo ">>> To try again, run 'export NIX_DL=\"$tmpDir\"' before running the install"
        echo ">>> otherwise, please remove $tmpDir manually."
    else
        rm -rf "$tmpDir"
    fi
}
trap cleanup EXIT INT QUIT TERM

case "$(uname -s).$(uname -m)" in
    Linux.x86_64) system=x86_64-linux; hash=[%nix_hash_x86_64_linux%];;
    Linux.i?86) system=i686-linux; hash=[%nix_hash_i686_linux%];;
    Linux.aarch64) system=aarch64-linux; hash=[%nix_hash_aarch64_linux%];;
    Darwin.x86_64) system=x86_64-darwin; hash=[%nix_hash_x86_64_darwin%];;
    *) oops "sorry, there is no binary distribution of Nix for your platform";;
esac

url="https://nixos.org/releases/nix/nix-[%latestNixVersion%]/nix-[%latestNixVersion%]-$system.tar.bz2"

tarball="$tmpDir/$(basename "$tmpDir/nix-[%latestNixVersion%]-$system.tar.bz2")"

require_util curl "download the binary tarball"
require_util bzcat "decompress the binary tarball"
require_util tar "unpack the binary tarball"

echo "downloading Nix [%latestNixVersion%] binary tarball for $system from '$url' to '$tmpDir'..."
curl -L "$url" -o "$tarball" || oops "failed to download '$url'"

if type sha256sum > /dev/null 2>&1; then
    hash2="$(sha256sum -b "$tarball" | cut -c1-64)"
elif type shasum > /dev/null 2>&1; then
    hash2="$(shasum -a 256 -b "$tarball" | cut -c1-64)"
elif type openssl > /dev/null 2>&1; then
    hash2="$(openssl dgst -r -sha256 "$tarball" | cut -c1-64)"
else
    oops "cannot verify the SHA-256 hash of '$url'; you need one of 'shasum', 'sha256sum', or 'openssl'"
fi

if [ "$hash" != "$hash2" ]; then
    oops "SHA-256 hash mismatch in '$url'; expected $hash, got $hash2"
fi

unpack=$tmpDir/unpack
mkdir -p "$unpack"
< "$tarball" bzcat | tar -xf - -C "$unpack" || oops "failed to unpack '$url'"

retain=true

unpack=$tmpDir/unpack
checkScript() {
    script=$(echo "$unpack"/*/install)
    [ -e "$script" ]
}
if ! checkScript; then
    mkdir -p "$unpack"
    < "$tarball" bzcat | tar x -C "$unpack" || oops "failed to unpack '$url'"

	checkScript || oops "installation script is missing from the binary tarball!"
fi

if "$script"; then
    retain=false
fi
} # End of wrapping
