// This file defines the navigation bar at the top of the page.

body > header {
  @_height: #theme.navbar[height];
  @_link_flavour_size: 4*@unit;
  #no-select();

  position: relative;
  z-index: 10;
  margin-bottom: @gutter;
  #fill-width();
  background: #theme.navbar[background];

  border-bottom: 1*@unit solid rgba(0, 0, 0, 0.2);
  box-shadow: #theme.common[box-shadow];

  // Ensure *everything* in the navbar fills it vertically.
  * {
    line-height: @_height;
  }

  &, a {
    color: #theme.navbar[foreground];
  }

  // The "centered" container is that unsemantic div.
  & > div {
    #container();
    display: flex;
    flex-grow: 1;
    #rules-for-responsive-navbar-narrow({
      flex-direction: column;
    });
  }

  // Children of the unsemantic div are laid out horizontally.
  & > div > * {
    margin: 0;
    min-height: @_height;
    flex-grow: 1;

    #rules-for-responsive-navbar-wide({
      height: @_height;
    });
  }

  // Unlistify lists in navbar
  ul, li {
    list-style-type: none;
  }

  // Links are block types here, so that they fill the area.
  a {
    display: block;
  }

  // This ends up being replaced by the logo.
  h1 {
    font-size: 1.2em;
    #rules-for-responsive-navbar-narrow({
      padding-left: @gutter;
    });
  }

  // NixOS-specific customization of the navbar brand.
  // This uses the usual tricks to shove the text outside of the visible area,
  // to replace it with the pre-rendered paths.
  // It is using separate images for the logo and the text.
  h1 > a {
    // 50px logo height in the mockups
    // 464 is the logo height in the svg document, which is 517 tall
    @_lambdaflake_height: 50 * 517 / 464 * @unit;

    // Use three's complement to automatically compute the widths.
    @_lambdaflake_width: @_lambdaflake_height * 587/517;
    @_nixos_text_width: @_lambdaflake_height * 1059/516;

    #text-replacement(
      @image-rules: {
        // Causes the pseudo-element to stick to the left.
        right: initial;
      },
      @pseudo: before,
      @width: @_lambdaflake_width,
      @height: @_height,
    );

    &::before {
      #svg.lambdaflake.color();
    }


    #text-replacement(
      @image-rules: {
        // Causes the pseudo-element to stick to the right.
        left: initial;
      },
      @pseudo: after,
      @width: @_nixos_text_width,
      @height: @_height,
    );
    &::after {
      #svg.nixos-text.black();
    }

    // We can't rely on what `#text-replacement` gives us since we're doing it twice.
    // So we simply add them up here :)
    width: @_lambdaflake_width + @_nixos_text_width;

    padding: 0;
    margin-right: @gutter;
  }

  nav .button {
    margin-left: @gutter / 2;
    &::before {
      display: none;
    }
  }

  nav .search {
    a:after {
      #svg.icon.search.blue-light;
    }

    #rules-for-responsive-navbar-wide({
      a {
        #text-replacement(
          @image-rules: {
            left: @gutter;
          },
          // ::before is co-opted for the focus/active blue bar.
          @pseudo: after,
          @width: @input-icon-size,
          @height: @_height,
        );
        width: @input-icon-size + @gutter*2,
      }
    });
  }

  nav > ul {
    margin: 0;
    padding: 0;
    display: flex;
    flex-direction: column;
    #rules-for-responsive-navbar-wide({
      flex-direction: row;
      justify-content: flex-end;
      align-items: center;

      // Force align the *text's* right to the last column's right.
      // Preferrable than removing the link's right padding. Removing the
      // right padding will reduce the clickable and touchable target size.
      // (Disabled because a button won't have that issue)
      // position: relative;
      // left: @gutter;
    });
  }

  a {
    white-space: nowrap;
    text-decoration: none;
    border-bottom: 0;
    padding-left:  15*@unit;
    padding-right: 15*@unit;
    #screen-sm-only({
      padding-left:  10*@unit;
      padding-right: 10*@unit;
    });
    &:hover, &:focus, &:active {
      text-decoration: none;
      border-bottom: 0;
    }
  }

  li {
    a {
      position: relative;
      &::before {
        content: "";
        display: block;
        position: absolute;
        bottom: 0;

        // See paddings higher up.
        left: 13*@unit;
        right: 13*@unit;
        #screen-sm-only({
          left: 8*@unit;
          right: 8*@unit;
        });
        height: @_link_flavour_size;
      }
    }
    &.active a {
      font-weight: bold;
    }
    &.active a, & a:active, & a:hover, & a:focus {
      &::before {
        background: #theme.color[blue-light];
      }
    }
  }

  #screen-sm-only({
    // When the site is narrow, but not quite xs, prefer filling
    // the width with the menu instead of using the hamburglar menu.
    & > div {
      max-width: initial;
      padding-left: @gutter;
      padding-right: @gutter;
    }
  });

  #screen-sm-max({
    li.install-nix {
      display: none;
    }
  });

  // When we're on the *wide* website, we're undoing the work that the
  // JavaScript code may have done.
  // This allows the menu to not stay accidentally hidden when switching from
  // narrow to wide; it is **always** shown when wide, and controlled via
  // the hamburglar menu button otherwise.
  #rules-for-responsive-navbar-wide({
    nav {
      display: initial !important;
    }
  });

  // Don't forget about JavaScript-less users! We'll serve them the menu
  // permanently open on narrow devices.
  html.without-js & nav {
    display: initial !important;
  }

  #rules-for-responsive-navbar-narrow({
    @_spacing: @gutter * 2;
    // FIXME: we don't seem to have a dark-themed palette for the menu.
    nav {
      margin-left: -@gutter;
      margin-right: -@gutter;
      padding-top: @_spacing;
      padding-bottom: @_spacing;
      text-align: center;
      background: #theme.color[blue-lighter];

      li:not(:first-child) {
        a {
          border-top: 2*@unit solid #theme.color[white];
        }
      }

      a {
        margin-left: @_spacing;
        margin-right: @_spacing;
        color: #theme.color[blue-dark2];
      }

      li.active a, a.active, a:hover, a:focus {
        background: #theme.color[blue-light];
        color: #theme.color[white];
      }
    }
  });

  .menu-toggle {
    @_gutter: @gutter;

    height: @_height - @_gutter*2;
    overflow: hidden;
    text-indent: -900em;
    width: @_height * 0.4;
    position: absolute;
    top: @_gutter;
    right: @_gutter;

    background-color: #theme.color[white];
    box-shadow: none;
    border-radius: #theme.common[radius]/2;
    border: 2*@unit solid #theme.color[blue-light];

    #rules-for-responsive-navbar-wide({
      display: none;
    });

    // The pseudo-elements implement the hamburglar bars.
    &::before, &::after {
      content: "";
      position: absolute;
      left:  @gutter * 0.8;
      right: @gutter * 0.8;
      border: 2*@unit solid #theme.color[blue-light];
      border-left: 0;
      border-right: 0;
    }
    &::before {
      top:    @gutter * 0.9;
      bottom: @gutter * 0.9;
    }
    &::after {
      top: 50%;
      transform: translateY(-50%);
      border-bottom: 0;
    }
  }
}

// Static navbar
// =============

& when (#theme.navbar[static] = true) {
  body > header {
    position: static;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1050;
    #rules-for-responsive-navbar-wide({
      position: fixed;
    });
  }

  body {
    #rules-for-responsive-navbar-wide({
      padding-top: #theme.navbar[height] + @gutter;
    });
  }

  [id] {
    scroll-margin-top: #theme.navbar[height] + @gutter * 2;
  }
}

// Navbar mixins
// =============

// Responsive rules for when the collapsible menu is not in use.
// REMINDER: Prefer setting the responsive rules first; override for larger widths. 
#rules-for-responsive-navbar-wide(@rules) {
  #screen-sm-min({
    @rules();
  });
}

// Responsive rules for when the collapsible menu is in use.
#rules-for-responsive-navbar-narrow(@rules) {
  #screen-xs-max({
    @rules();
  });
}
